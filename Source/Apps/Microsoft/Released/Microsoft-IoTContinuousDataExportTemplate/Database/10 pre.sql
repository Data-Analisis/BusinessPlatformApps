SET ANSI_NULLS              ON;
SET ANSI_PADDING            ON;
SET ANSI_WARNINGS           ON;
SET ANSI_NULL_DFLT_ON       ON;
SET CONCAT_NULL_YIELDS_NULL ON;
SET QUOTED_IDENTIFIER       ON;

-- Must be executed inside the target database

-- Tables
IF EXISTS (SELECT * FROM INFORMATION_SCHEMA.TABLES WHERE TABLE_SCHEMA='dbo' AND TABLE_NAME='ChangeTracking' AND TABLE_TYPE='BASE TABLE')
    DROP TABLE dbo.ChangeTracking;
IF EXISTS (SELECT * FROM INFORMATION_SCHEMA.TABLES WHERE TABLE_SCHEMA='dbo' AND TABLE_NAME='Date' AND TABLE_TYPE='BASE TABLE')
    DROP TABLE dbo.[Date];

IF EXISTS (SELECT * FROM INFORMATION_SCHEMA.TABLES WHERE TABLE_SCHEMA='analytics' AND TABLE_NAME='Devices' AND TABLE_TYPE='BASE TABLE')
    DROP TABLE analytics.Devices;
IF EXISTS (SELECT * FROM INFORMATION_SCHEMA.TABLES WHERE TABLE_SCHEMA='analytics' AND TABLE_NAME='MeasurementDefinitions' AND TABLE_TYPE='BASE TABLE')
    DROP TABLE analytics.MeasurementDefinitions;
IF EXISTS (SELECT * FROM INFORMATION_SCHEMA.TABLES WHERE TABLE_SCHEMA='analytics' AND TABLE_NAME='Measurements' AND TABLE_TYPE='BASE TABLE')
    DROP TABLE analytics.Measurements;
IF EXISTS (SELECT * FROM INFORMATION_SCHEMA.TABLES WHERE TABLE_SCHEMA='analytics' AND TABLE_NAME='Models' AND TABLE_TYPE='BASE TABLE')
    DROP TABLE analytics.Models;
IF EXISTS (SELECT * FROM INFORMATION_SCHEMA.TABLES WHERE TABLE_SCHEMA='analytics' AND TABLE_NAME='Properties' AND TABLE_TYPE='BASE TABLE')
    DROP TABLE analytics.Properties;
IF EXISTS (SELECT * FROM INFORMATION_SCHEMA.TABLES WHERE TABLE_SCHEMA='analytics' AND TABLE_NAME='PropertyDefinitions' AND TABLE_TYPE='BASE TABLE')
    DROP TABLE analytics.PropertyDefinitions;

IF EXISTS (SELECT * FROM INFORMATION_SCHEMA.TABLES WHERE TABLE_SCHEMA='stage' AND TABLE_NAME='MeasurementDefinitions' AND TABLE_TYPE='BASE TABLE')
    DROP TABLE stage.MeasurementDefinitions;
IF EXISTS (SELECT * FROM INFORMATION_SCHEMA.TABLES WHERE TABLE_SCHEMA='stage' AND TABLE_NAME='Measurements' AND TABLE_TYPE='BASE TABLE')
    DROP TABLE stage.Measurements;
IF EXISTS (SELECT * FROM INFORMATION_SCHEMA.TABLES WHERE TABLE_SCHEMA='stage' AND TABLE_NAME='Models' AND TABLE_TYPE='BASE TABLE')
    DROP TABLE stage.Models;
IF EXISTS (SELECT * FROM INFORMATION_SCHEMA.TABLES WHERE TABLE_SCHEMA='stage' AND TABLE_NAME='Properties' AND TABLE_TYPE='BASE TABLE')
    DROP TABLE stage.Properties;
IF EXISTS (SELECT * FROM INFORMATION_SCHEMA.TABLES WHERE TABLE_SCHEMA='stage' AND TABLE_NAME='PropertyDefinitions' AND TABLE_TYPE='BASE TABLE')
    DROP TABLE stage.PropertyDefinitions;

    
-- Stored Procedures
IF EXISTS (SELECT * FROM INFORMATION_SCHEMA.ROUTINES WHERE ROUTINE_SCHEMA='dbo' AND ROUTINE_NAME='TransformDevices' AND ROUTINE_TYPE='PROCEDURE')
    DROP PROCEDURE dbo.TransformDevices;
IF EXISTS (SELECT * FROM INFORMATION_SCHEMA.ROUTINES WHERE ROUTINE_SCHEMA='dbo' AND ROUTINE_NAME='TransformMeasurementDefinitions' AND ROUTINE_TYPE='PROCEDURE')
    DROP PROCEDURE dbo.TransformMeasurementDefinitions;
IF EXISTS (SELECT * FROM INFORMATION_SCHEMA.ROUTINES WHERE ROUTINE_SCHEMA='dbo' AND ROUTINE_NAME='TransformMeasurements' AND ROUTINE_TYPE='PROCEDURE')
    DROP PROCEDURE dbo.TransformMeasurements;
IF EXISTS (SELECT * FROM INFORMATION_SCHEMA.ROUTINES WHERE ROUTINE_SCHEMA='dbo' AND ROUTINE_NAME='TransformModels' AND ROUTINE_TYPE='PROCEDURE')
    DROP PROCEDURE dbo.TransformModels;
IF EXISTS (SELECT * FROM INFORMATION_SCHEMA.ROUTINES WHERE ROUTINE_SCHEMA='dbo' AND ROUTINE_NAME='TransformProperties' AND ROUTINE_TYPE='PROCEDURE')
    DROP PROCEDURE dbo.TransformProperties;
IF EXISTS (SELECT * FROM INFORMATION_SCHEMA.ROUTINES WHERE ROUTINE_SCHEMA='dbo' AND ROUTINE_NAME='TransformPropertyDefinitions' AND ROUTINE_TYPE='PROCEDURE')
    DROP PROCEDURE dbo.TransformPropertyDefinitions;
IF EXISTS (SELECT * FROM INFORMATION_SCHEMA.ROUTINES WHERE ROUTINE_SCHEMA='dbo' AND ROUTINE_NAME='UpdateChangeTrackingVersion' AND ROUTINE_TYPE='PROCEDURE')
    DROP PROCEDURE dbo.UpdateChangeTrackingVersion;


IF NOT EXISTS (SELECT * FROM sys.schemas WHERE [name]='analytics')
BEGIN
    EXEC ('CREATE SCHEMA analytics AUTHORIZATION dbo'); -- Avoid batch error
END;
IF NOT EXISTS (SELECT * FROM sys.schemas WHERE [name]='stage')
BEGIN
    EXEC ('CREATE SCHEMA stage AUTHORIZATION dbo'); -- Avoid batch error
END;
